import { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';
import { verifyPersonalMessageSignature } from '@mysten/sui/verify';
import { isValidSuiAddress } from '@mysten/sui/utils';

import { WalletSignMessageType } from '../common/types';

export class SuiService {
  private walletPrivateKey;
  private wallet;

  constructor(walletPrivateKey: string) {
    this.walletPrivateKey = walletPrivateKey;
    this.wallet = this.getKeyPair();
  }

  /**
   * The function `getKeyPair` returns an Ed25519 key pair generated from a private key stored in the
   * wallet.
   * @returns An Ed25519 key pair is being returned.
   */
  private getKeyPair(): Ed25519Keypair {
    return Ed25519Keypair.fromSecretKey(this.walletPrivateKey);
  }

  /**
   * The function `signMessage` asynchronously signs a message using a key pair and returns the
   * signature along with the signing key in a specific format.
   * @param {string} message - The `message` parameter in the `signMessage` function is a string that
   * represents the message that will be signed by the wallet. This message will be encoded using
   * `TextEncoder` before being signed by the wallet's key pair.
   * @returns The `signMessage` function returns an object with two properties: `signature` and
   * `signingKey`. The `signature` property contains the signature generated by signing the provided
   * message, and the `signingKey` property contains the public key of the wallet used for signing the
   * message in Sui Address format.
   */
  public async signMessage(message: string): Promise<WalletSignMessageType> {
    const { signature } = await this.getKeyPair().signPersonalMessage(
      new TextEncoder().encode(message),
    );

    return { signature, signingKey: this.wallet.getPublicKey().toSuiAddress() };
  }

  public static async verifyMessage(
    message: string,
    signature: string,
    suiAddress: string,
  ) {
    const publicKey = await verifyPersonalMessageSignature(
      new TextEncoder().encode(message),
      signature,
    );

    return publicKey.toSuiAddress() === suiAddress;
  }

  public static validateWallet(wallet: string) {
    return isValidSuiAddress(wallet);
  }
}
